import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_KEY)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = ["üéÆ –ò–≥—Ä—ã", "üèÄ –°–ø–æ—Ä—Ç", "üé¨ –ö–∏–Ω–æ", "üì∫ –°–µ—Ä–∏–∞–ª—ã"]
user_preferences = {}

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏
def generate_news(categories):
    prompt = f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(categories)}."
    response = client.chat.completions.create(
        model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_preferences[update.effective_user.id] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=category_menu())

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_menu():
    buttons = [
        [InlineKeyboardButton(cat, callback_data=f"toggle_{cat}")]
        for cat in CATEGORIES
    ]
    buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "done":
        selected = user_preferences.get(user_id, [])
        if not selected:
            await query.edit_message_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        news = generate_news(selected)
        await query.edit_message_text(f"–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(selected)}\n\nüóû {news}")
    else:
        category = data.replace("toggle_", "")
        prefs = user_preferences.setdefault(user_id, [])
        if category in prefs:
            prefs.remove(category)
        else:
            prefs.append(category)
        await query.edit_message_reply_markup(reply_markup=category_menu())

# –ö–æ–º–∞–Ω–¥–∞ /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    prefs = user_preferences.get(user_id)
    if not prefs:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    news = generate_news(prefs)
    await update.message.reply_text(f"üóû {news}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CallbackQueryHandler(category_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
